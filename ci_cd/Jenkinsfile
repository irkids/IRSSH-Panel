pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: node
                    image: node:16
                    command:
                    - cat
                    tty: true
                  - name: docker
                    image: docker:latest
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                    - mountPath: /var/run/docker.sock
                      name: docker-sock
                  volumes:
                  - name: docker-sock
                    hostPath:
                      path: /var/run/docker.sock
            '''
        }
    }

    environment {
        DOCKER_REGISTRY = 'registry.example.com'
        APP_NAME = 'irssh-panel'
        DOCKER_CREDS = credentials('docker-registry-credentials')
        KUBE_CONFIG = credentials('kubernetes-config')
    }

    stages {
        stage('Test') {
            steps {
                container('node') {
                    sh 'npm install'
                    sh 'npm run test'
                }
            }
        }

        stage('Build') {
            steps {
                container('docker') {
                    sh """
                        echo \$DOCKER_CREDS_PSW | docker login \$DOCKER_REGISTRY -u \$DOCKER_CREDS_USR --password-stdin
                        docker build -t \$DOCKER_REGISTRY/\$APP_NAME:${BUILD_NUMBER} .
                        docker push \$DOCKER_REGISTRY/\$APP_NAME:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                container('docker') {
                    sh """
                        kubectl --kubeconfig=\$KUBE_CONFIG set image deployment/\$APP_NAME \
                        \$APP_NAME=\$DOCKER_REGISTRY/\$APP_NAME:${BUILD_NUMBER} -n staging
                    """
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                input message: 'Deploy to production?'
                container('docker') {
                    sh """
                        kubectl --kubeconfig=\$KUBE_CONFIG set image deployment/\$APP_NAME \
                        \$APP_NAME=\$DOCKER_REGISTRY/\$APP_NAME:${BUILD_NUMBER} -n production
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
            slackSend channel: '#deployments',
                      color: 'good',
                      message: "Successfully deployed ${env.APP_NAME} to ${env.BRANCH_NAME}"
        }
        failure {
            echo 'Pipeline failed!'
            slackSend channel: '#deployments',
                      color: 'danger',
                      message: "Failed to deploy ${env.APP_NAME} to ${env.BRANCH_NAME}"
        }
    }
}
