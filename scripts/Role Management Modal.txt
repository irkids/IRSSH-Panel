import React, { useState, useEffect } from 'react';
import { X, Plus, Save } from 'lucide-react';

const RoleModal = ({ role = null, onClose, onSave, permissions }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    permissions: [],
    restrictions: {
      max_users: '',
      ip_ranges: [],
      time_restrictions: {
        enabled: false,
        working_hours: {
          start: '09:00',
          end: '17:00'
        },
        working_days: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']
      }
    }
  });

  useEffect(() => {
    if (role) {
      setFormData({
        name: role.name,
        description: role.description,
        permissions: role.permissions,
        restrictions: role.restrictions
      });
    }
  }, [role]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const togglePermission = (permId) => {
    setFormData(prev => ({
      ...prev,
      permissions: prev.permissions.includes(permId)
        ? prev.permissions.filter(id => id !== permId)
        : [...prev.permissions, permId]
    }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">
            {role ? 'Edit Role' : 'Create New Role'}
          </h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="w-5 h-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Role Name
              </label>
              <input
                type="text"
                required
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                rows={3}
              />
            </div>
          </div>

          {/* Permissions */}
          <div>
            <h3 className="text-sm font-medium text-gray-700 mb-2">Permissions</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
              {permissions.map(perm => (
                <label
                  key={perm.id}
                  className="flex items-center p-2 border rounded hover:bg-gray-50 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-blue-600"
                    checked={formData.permissions.includes(perm.id)}
                    onChange={() => togglePermission(perm.id)}
                  />
                  <span className="ml-2 text-sm text-gray-700">{perm.name}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Restrictions */}
          <div>
            <h3 className="text-sm font-medium text-gray-700 mb-2">Restrictions</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Maximum Users
                </label>
                <input
                  type="number"
                  className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
                  value={formData.restrictions.max_users}
                  onChange={(e) => setFormData({
                    ...formData,
                    restrictions: {
                      ...formData.restrictions,
                      max_users: e.target.value
                    }
                  })}
                />
              </div>

              {/* Time Restrictions */}
              <div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={formData.restrictions.time_restrictions.enabled}
                    onChange={(e) => setFormData({
                      ...formData,
                      restrictions: {
                        ...formData.restrictions,
                        time_restrictions: {
                          ...formData.restrictions.time_restrictions,
                          enabled: e.target.checked
                        }
                      }
                    })}
                    className="rounded border-gray-300"
                  />
                  <label className="text-sm font-medium text-gray-700">
                    Enable Time Restrictions
                  </label>
                </div>

                {formData.restrictions.time_restrictions.enabled && (
                  <div className="mt-2 space-y-2">
                    <div className="flex space-x-4">
                      <div>
                        <label className="block text-sm text-gray-600">Start Time</label>
                        <input
                          type="time"
                          className="mt-1 block rounded-md border border-gray-300 px-3 py-2"
                          value={formData.restrictions.time_restrictions.working_hours.start}
                          onChange={(e) => setFormData({
                            ...formData,
                            restrictions: {
                              ...formData.restrictions,
                              time_restrictions: {
                                ...formData.restrictions.time_restrictions,
                                working_hours: {
                                  ...formData.restrictions.time_restrictions.working_hours,
                                  start: e.target.value
                                }
                              }
                            }
                          })}
                        />
                      </div>
                      <div>
                        <label className="block text-sm text-gray-600">End Time</label>
                        <input
                          type="time"
                          className="mt-1 block rounded-md border border-gray-300 px-3 py-2"
                          value={formData.restrictions.time_restrictions.working_hours.end}
                          onChange={(e) => setFormData({
                            ...formData,
                            restrictions: {
                              ...formData.restrictions,
                              time_restrictions: {
                                ...formData.restrictions.time_restrictions,
                                working_hours: {
                                  ...formData.restrictions.time_restrictions.working_hours,
                                  end: e.target.value
                                }
                              }
                            }
                          })}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm text-gray-600 mb-1">Working Days</label>
                      <div className="flex flex-wrap gap-2">
                        {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => (
                          <button
                            key={day}
                            type="button"
                            className={`px-3 py-1 rounded text-sm ${
                              formData.restrictions.time_restrictions.working_days.includes(day)
                                ? 'bg-blue-100 text-blue-800'
                                : 'bg-gray-100 text-gray-600'
                            }`}
                            onClick={() => {
                              const days = formData.restrictions.time_restrictions.working_days;
                              setFormData({
                                ...formData,
                                restrictions: {
                                  ...formData.restrictions,
                                  time_restrictions: {
                                    ...formData.restrictions.time_restrictions,
                                    working_days: days.includes(day)
                                      ? days.filter(d => d !== day)
                                      : [...days, day]
                                  }
                                }
                              });
                            }}
                          >
                            {day}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* IP Range Restrictions */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  IP Range Restrictions
                </label>
                <div className="space-y-2">
                  {formData.restrictions.ip_ranges.map((range, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="text"
                        className="flex-1 rounded-md border border-gray-300 px-3 py-2"
                        value={range}
                        onChange={(e) => {
                          const newRanges = [...formData.restrictions.ip_ranges];
                          newRanges[index] = e.target.value;
                          setFormData({
                            ...formData,
                            restrictions: {
                              ...formData.restrictions,
                              ip_ranges: newRanges
                            }
                          });
                        }}
                      />
                      <button
                        type="button"
                        onClick={() => {
                          const newRanges = formData.restrictions.ip_ranges.filter((_, i) => i !== index);
                          setFormData({
                            ...formData,
                            restrictions: {
                              ...formData.restrictions,
                              ip_ranges: newRanges
                            }
                          });
                        }}
                        className="text-red-600 hover:text-red-800"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={() => setFormData({
                      ...formData,
                      restrictions: {
                        ...formData.restrictions,
                        ip_ranges: [...formData.restrictions.ip_ranges, '']
                      }
                    })}
                    className="flex items-center text-blue-600 hover:text-blue-800"
                  >
                    <Plus className="w-4 h-4 mr-1" />
                    Add IP Range
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="w-4 h-4 mr-2" />
              {role ? 'Update Role' : 'Create Role'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RoleModal;
